*******************************
**BEGIN Bui-ISO.dck
*******************************
    
*****************************************
** V0
** Last Changes: Dani Carbonell        
** Date: 30.09.2016    
******************************************

***********************************
** inputs from hydraulic solver
***********************************

EQUATIONS 1
TRdFl = TPiRadIn    !JS: change from     TRdFlMix = 30-15*CoolOn     ! [44,1]

***********************************
** outputs to hydraulic solver
***********************************
EQUATIONS 1
TRdRt = [42,1]     ! return temperature from space heat distribution system, °C

******************************************************************************************
** outputs to energy balance in kWh
** Following this naming standard : qSysIn_name, qSysOut_name, elSysIn_name, elSysOut_name
******************************************************************************************
EQUATIONS 3
qSysOut_BuiDemand = PheatBui_kW ! Total heat (without cooling) Heat to Building from Radiator: W --> kW
qSysIn_BuiDemand  = PcoolBui_kW !   
elSysOut_PuSH      = PelPuSh_kW  ! To be moved and generated automatically to hydraulic GUI export
**qSysOut_FloorLoss = RadFloorLoss_kW

*************************************************************************************************
** Dependencies with other types
** If only one dependency defined here. 
** If a variable is used more than once, redefine it here, e.g. varUsedInside=varFromAnotherDeck

**CoolingOn = GT(TroomRc,24)*NOT(BoHS)
**TrdSet = 35
*************************************************************************************************

EQUATIONS 1     
T_Set_d       = MAX(TRdRt,TrdSet)      ! TrdSet output from TYPE 888. Temperature set point for tempering valve used in hydraulic. 
**MfrBuiHeatRd  = NOT(BoAuxWWOn)*MfrBuiRdNom*PIDRadBui*BoHS  ! BoAuxWWOn and BoHS outputs from TYPE 888. DC : added LT(Troom,tRoomSet+1) to avoid heating in spring/summer when tRoom =25 °C
**PBuiGainCircLoss_KW = ABS(PCIRC_kW)*factorCircToSh !*BoHS  remove BoHS, because gains are relevant for cooling in summer  ! relative air mass flow rate for the SFH, -

*****************************************************************
** Dependencies with overall variables 
**
**Tamb, IT_N, IT_S, IT_E, IT_W from weatherData
**CPWAT (kJ/kgK) from Head.ddck -> changeTo FluidProperties.ddck
****************************************************************


***********************************
** Generic variables
***********************************

CONSTANTS 4   
scaleBuilding = 1
**PheatBuiD = 12830*scaleBuilding  ! design heating rate for building an location [kJ/h]
TBuiFlNom = 40 ! 35     ! Design flow temp. heating syst. [°C]
TBuiRtNom = 35 ! 30     ! Design return temp. heating syst. [°C]
Precond = NIX      ! Extracted mean ground preconditioning power

**EQUATIONS 1
**CoolOn = GT(TroomRc,24)*NOT(BoHS)

CONSTANTS 8    
TIdCoolSet = 100     
TIdHeatSet = 0     ! temperature for Ideal heating of building, > 10 disables floor heating system and internal gains by people and electrical devices, but not airchange heat recovery
TroomSet   = 21.00     ! Setpoint for Room temperature, °C
TroomSetCool   = 24.00     ! Setpoint for Room temperature for cooling, °C
MfrBuiRdNom = 2.75*LFloorPipeTotal/4 !PheatRadNom/(CPWAT*(TBuiFlNom-TBuiRtNom))     ! Nominal mass flow of heat distribution system [kg/h] !JS: Divide by factor of 4 to have more realistic values
PheatRadNom = MfrBuiRdNom*CPWAT*(TBuiFlNom-TBuiRtNom)
**ftemp = (60./((TBuiFlNom+TBuiRtNom)/2-TroomSet))^(m_Rd)        ! ftemp: faktor Qnominal -> Qnorm,real (DT=60 - 90/70/20) Radiator (c>=0.7), -
**PRadBuidT60 = ftemp*PheatRadNom                       ! Heating Rate at 60 °C Radiator temperature, kJ/h
pGainRad = 0.6     
iGainRad = 0.05     

UNIT 41 TYPE 320     ! PID Controller for Radiator mass flow (Idea: instead of thermostatic valves a PID controler is taken to reduce mass flow if the room temperature gets too high)
PARAMETERS 7     
3     ! 1 Temperature width of PID band
pGainRad     ! 2 Proportional gain PID band
iGainRad     ! 3 Integral gain PID band
0     ! 4 Differential gain PID band
0.5     ! 5 Proportional gain P-band
0     ! 6 Saturation mode
0     ! 7 Minimum value controller action in saturation mode
INPUTS 3     
TroomSet        !  Set temperature
TroomRc         !  Building: 1- (air temperature of zone)  TAIR   1 ->Feedback room temperature
0,0          !  Control inversion option 1: increasing, 2: decreasing action
*** INITIAL INPUT VALUES     
22 18 2      
     
EQUATIONS 3    
PIDRadBuiMin = 0.15  !  0.05    !0.01 
PIDBuiOut =  [41,1]
PIDRadBui = MIN(GT(PIDBuiOut,PIDRadBuiMin)*PIDBuiOut,1) ![41,1]*BoHS     
**MfrBuiRd  = NOT(BoAuxWWOn)*MfrBuiRdNom*PIDRadBui*BoHS*LE(TroomRc,tRoomSet+1)  ! DC : added LT(Troom,tRoomSet+1) to avoid heating in spring/summer when tRoom =25 °C     
** MfrBuiRd  = NOT(BoAuxWWOn)*MfrBuiRdNom*PIDRadBui*BoHS+MfrBuiRdNom*CoolingOn  ! DC : added LT(Troom,tRoomSet+1) to avoid heating in spring/summer when tRoom =25 °C
 

 
UNIT 44 TYPE 320     ! PID Controller for Cooling Radiator mass flow 
PARAMETERS 7     
3     ! 1 Temperature width of PID band
pGainRad     ! 2 Proportional gain PID band
iGainRad     ! 3 Integral gain PID band
0     ! 4 Differential gain PID band
0.5     ! 5 Proportional gain P-band
0     ! 6 Saturation mode
0     ! 7 Minimum value controller action in saturation mode
INPUTS 3     
TroomSetCool        !  Set temperature
TroomRc         !  Building: 1- (air temperature of zone)  TAIR   1 ->Feedback room temperature
0,0          !  Control inversion option 1: increasing, 2: decreasing action
*** INITIAL INPUT VALUES     
24 22 1      
     
EQUATIONS 4    
PIDRadCoolBuiMin = 0.15  !  0.05    !0.01   
PIDRaCooldBui = MIN(MAX([44,1],PIDRadCoolBuiMin),1) ! DC, JEREMIAS you had [41,1]
** MfrBuiCoolRd  = MfrBuiRdNom*PIDRaCooldBui*CoolingOn  ! DC : added LT(Troom,tRoomSet+1) to avoid heating in spring/summer when tRoom =25 °C
MfrBuiCoolRd  = MfrBuiRdNom*CoolingOn  ! JS: cooling no longer uses PID, but instead a deadband
MfrBuiHeatRd  = MfrBuiRdNom*NOT(CoolingOn)*PIDRadBui
** EQUATIONS 1     ! Flow rate of the heating system
** gPuRadBui = GT(PIDRadBui,0)*[41,2]/MfrBuiRdNom     ! fraction of nominal mass flow rate, -


CONSTANTS 2
TCoolStart = 26 ! Start Cooling if Troom is above this temperature
dTCool = 1 ! Cooling deadband



EQUATIONS 1
CoolingNeeded = OR(AND(GE(Troom,TCoolStart-dTCool),CoolingNeededRc),GE(Troom,TcoolStart)) !Deadband


EQUATIONS 1
MfrBuiRd  = MfrBuiHeatRd + MfrBuiCoolRd



CONSTANTS 17
AFloor     =  AreaBui ! m2
dxBetweenTubes = 0.144
LFloorPipe = 50 ! 50 m/pipe  
LFloorPipeTotal = 7*AFloor!6.95*AFloor !
dFloorPipe      = 0.015 
nParallelPipe   = LFloorPipeTotal/LFloorPipe+1 ! usually distance 10-15 cm
indexPipeLayer  = 2 !from bottom !!!! IT SHOULD BE CHANGED !!!!!
pipeFloorWallThick   = 0.002 ! 2 mm thickness
lambdaFloorPipe  = 0.4 ! W/mK multi layer tube (pastic PE-RT +  aluminium (oxygen tight) + PE-HD)
alphaMode    = 0 ! calculated internally -1 alpha for all Cv, 1 using tin, 0 fixed
accelerator  = 0
nCvFloorPipe = 100
TiniFloor    = 30
epsilonWood  = 0.9 
nMatType1792 = 4 !LAYERS FROM TOP TO BOTTOM : (1) wood, (2) beton, (3) pipe, (4) insulation
nParType1792 = 15+nMatType1792*5
bocoDown = 0 ! U and T below the floor

CONSTANTS 19
thickInsFloor  = 0.042 !
lambdaInsFloor = 0.037
cpInsFloor     = 2.1 ! kJ/kgK
rhoInsFloor    = 280
nCvInsFloor    = 1
thickBetonPipe = dFloorPipe
nCvBetonPipe = 1
thickBeton  = 0.04 -  thickBetonPipe
lambdaBeton = 2
cpBeton     = 0.950 ! kJ/kgK
rhoBeton    = 250 
nCvBeton    = 1 
thickWood   = 0.01
lambdaWood  = 0.1
cpWood      = 2.3
rhoWood     = 600
nCvWood     = 1
PBuiGrd_kW  = 0
epsilonDown = 0
EQUATIONS 6		!TRY WITH RC to see if It problems are solved
TfloorUp    = TroomRc
TBelowFloor = TroomRc     !To avoid bot losses we use U=0 (adiabatic) since losses has been already included in the building model
TviewUp     = TroomRc
TviewDown = 0
UBelowFloor = 0.0 ! adiabatic
UconvUp = -1
UNIT 42 TYPE 1792     ! Radiant floor
PARAMETERS nParType1792     
AFloor   	![m^2]        total area of floor
dxBetweenTubes       ![m]    total length of heating pipe 
dFloorPipe       ![m]     diameter of heating pipe
nParallelPipe    ![-]     number of parallel pipes
indexPipeLayer   ![-]     index pipe layer from the bottom
pipeFloorWallThick   ![m]     thickness of pipe wall
lambdaFloorPipe  ![W/m/K] heat conductivity pipe wall
alphaMode        ![-]     Mode of forced heat transfer coefficient computation
accelerator		 ! calculation acceleration		
CPWAT            ![kJ/K/kg]           specific heat of fluid
nCvFloorPipe     ![-]                    number of control volumes (cells) in fluid model
TiniFloor        ![°C]                   initial floor temperature
epsilonWood      ![-]                    emissivity of layer at the interface to the room
epsilonDown     ![-]                    number of different materials
nMatType1792
******
thickWood 
lambdaWood
cpWood    		    
rhoWood           
nCvWood   
******
thickBeton     ![m]                    thickness of material
lambdaBeton    ![W/m/K]                heat conduction coefficient of material
cpBeton        ![kJ/K/kg] -> [J/K/kg]  specific heat of material
rhoBeton       ![kg/m^3]
nCvBeton       ![-]                    number of control volumes for this material
*****
thickBetonPipe    ![m]                    thickness of material
lambdaBeton    ![W/m/K]                heat conduction coefficient of material
cpBeton        ![kJ/K/kg] -> [J/K/kg]  specific heat of material
rhoBeton       ![kg/m^3]
nCvBetonPipe   ![-]                    number of control volumes for this material
**********
thickInsFloor    ![m]                    thickness of material
lambdaInsFloor   ![W/m/K]                heat conduction coefficient of material
cpInsFLoor       ![kJ/K/kg] -> [J/K/kg]  specific heat of material
rhoInsFloor      ![kg/m^3]
nCvInsFloor      ![-]                    number of control volumes for this material
******
INPUTS 8
TRdFl     ! supply Temperature
MfrBuiRd  ! mass flow rate    [kg/h
TfloorUp   ! room air temperature  Top    [°C]
TBelowFloor  ! ground temperature at 1 m depth    [°C] 
TviewUp    ! room field temperature    [°C]
TviewDown	! lower room field temperature
UconvUp		! upper room U value (if set to negtive value-->internal calculation)
UBelowFloor   ! room field temperature below if bocoDown=1, if bocoDown=0 UA between floor and ground (TfloorBot)   [°C]

*** INITIAL INPUT VALUES     
35 MfrBuiRdNom 21 21 21 21 -1 0

EQUATIONS 20
mFlowPerRadFloorTube = [42,2] 
PRdIn_kW    = [42,4]/1000 ! heat injected by fluid to floor W -> kW
PheatBui    = [42,3]*3.6      ! Heat to Building from Radiator: W -> kJ/h
**PheatBui_kW = MAX([42,3]/1000,0)      ! Heat to Building from Radiator: W --> kW
PtotBui_kW = [42,3]/1000      ! Heat to Building from Radiator: W --> kW
PheatBui_kW = PRdIn_kW*GT(PRdIn_kW,0)  ! total heat (without cooling)  Heat to Building from Radiator: W --> kW
PcoolBui_kW = -PRdIn_kW*LE(PRdIn_kW,0)  ! total cooling     
** PcoolBui_kW = MIN([42,3]/1000,0)      ! Heat to Building from Radiator: W --> kW
QAcumRadiator = -[42,5]/1000     !Total Accumulated Heat in Radiator, such that in+acum=out
RadFloorLoss_kW  =  [42,6]/1000
TWood = [42,7]
PheatBuiRad_kW  = [42,9]/1000  ! total useful
PheatBuiConv_kW = [42,10]/1000 ! total useful
PheatBuiRadBot_kW  = [42,11]/1000  !loss
PheatBuiConvBot_kW = [42,12]/1000 !loss
PheatBuiBot_KW = PheatBuiRadBot_kW+PheatBuiConvBot_kW ! we assume losses below are inputs to lower flat. 
MfrSh = MfrBuiRd     
BoPumpShOn = GT(MfrSh,0.0001)     ! actual pressure-drop of space heat distribution in Pascal, Pa
ImbRad=PRdIn_KW+QAcumRadiator-PtotBui_kW     
RadInImb = PRdIn_kW-CPWat*MfrBuiRd*(TRdFl-TRDRt)/3600        
ratioRad = GT(PtotBui_kW,0.)*(PheatBuiRad_kW/(0.00001+PheatBuiConv_kW))
TfloorLayerBot = [42,13]	
 
EQUATIONS 2
PheatBuiRad  = [42,9]*3.6    !W -> kJ/h
PheatBuiConv = [42,10]*3.6   !W -> kJ/h
     
** Attention! No mass flow dependency of the efficiency here due to thermostatic valves!     
EQUATIONS 7     ! Electric pump power for space heat distribution
MfrShNom = MfrBuiRdNom     ! nominal mass flow rate, kg/h
dpShNom_bar = 0.25     ! pressure-drop of loop at nominal mass flow, bar     
frMfrSh= MfrSh/MfrShNom     ! Flow rate fraction of nominal flow rate    
dpSh_bar = (frMfrSh)^2*dpShNom_bar     ! pressure drop at actual mass flow rate, bar
PflowSh_W = ((MfrShNom/3600)/RhoWat)*dpShNom_bar*100000     ! required power to drive the flow, W
etaPuSh = 0.3-0.00*(1-frMfrSh)     ! pump efficiency equation dependent on fractional mass flow rate of nominal mass flow rate
PelPuSh_kW = GT(MfrSh,1)*0.015     ! required pump electric power, kW
    
!!!!!!!!!!!!!!!!!!!
!!!!!!!! GROUND AND UNDISTURBED TEMPERATURE 
!!!!!!!!!!!!!!!!!!!

**EQUATIONS 6     ! Inputs for building coupling to ground calculation
**lamGroundBui = 7.2     ! thermal conductivity of ground below building, kJ/hmK
**cpGroundBui = 0.8     ! cp of ground below building, kJ/kgK
**rhoGroundBui = 2500     ! density of ground below building, kg/m3
**zGr1 = 1     ! bottom of first ground layer, m
**zGr2 = 10     ! bottom of second ground layer, m
**Aground = 70     ! surface of ground-building contact, m2
**     
**     
**EQUATIONS 4     ! Ground Properties
**lamGrd = 2     ! Thermal ground conductivity (W/mK)
**RhoGrd = 2500     ! Density of the ground (kg/m3)
**CpGrd = 0.8     ! specific heat of the ground (kJ/kgK)
**Gt = 0.025     ! Geothermal gradient (K/m)
**     
**EQUATIONS 9     ! Inputs for Undisturbed Ground temperature calculation and ground coupling losses
**UGrFloor = 0.183     ! U-Value of Ground floor, W/m2K
**zGrd1 = 1     ! depth 1 for evaluation of undisturbed ground temperature (m)
**zGrd2 = 2     ! depth 2 for evaluation of undisturbed ground temperature (m)
**zGrd5 = 5     ! depth 3 for evaluation of undisturbed ground temperature (m)
**lFl = 10     ! lenght of building floor in contact with ground (m)
**bFl = 7     ! width of building floor in contact with ground (m)
**w = 0.4     ! width of sidewalls of floor (m)
**RGrTot = 1/UGrFloor     ! total thermal resistance of floor (Km2/W)
**Psi = 0     ! Linear thermal transmittance associated with wall/floor junction (W/mK)
     
**EQUATIONS 3     ! Determine TiAvg and dTi for floor heating
**TiMax =20+  ((TBuiFlNom + TBuiRtNom)/2-20)/(20-TambD)*(20-(TambAvg-dTambAmpl))     ! Maximum floor temperature average in coldest time of the year (°C)
**TiAvg = LT(m_Rd,1.2)*(TiMax+20)/2+GT(m_Rd,1.2)*20     ! Average of floor temperature over the year (°C)
**dTi = LT(m_Rd,1.2)*(TiMax-TiAvg)+GT(m_Rd,1.2)*0     ! amplitude of floor temperature sine-curve (K)
**        
**UNIT 55 TYPE 985     ! Undisturbed Ground Temperature and Ground Coupling
**PARAMETERS 17     
**TambAvg      ! 1: Average ambient temperature over the year (°C)
**dTambAmpl     ! 2: amplitude of sine-curve that fits ambient temp. over the year (K)
**tTambShift     ! 3: time shift for coldest average temp. according to sine-curve fit (h)
**lamGrd     ! 4: Thermal ground conductivity (W/mK)
**RhoGrd     ! 5: Density of the ground (kg/m3)
**CpGrd     ! 6: specific heat of the ground (kJ/kgK)
**Gt     ! 7: Geothermal gradient (K/m)
**zGrd1     ! 8: depth 1 for evaluation of undisturbed ground temperature (m)
**zGrd2     ! 9: depth 2 for evaluation of undisturbed ground temperature (m)
**zGrd5     ! 10: depth 3 for evaluation of undisturbed ground temperature (m)
**TiAvg     ! 11: average inside temperature over the year (°C)
**dTi     ! 12: amplitude of sine-curve that fits inside temp. over the year (K)
**lFl     ! 13: lenght of building floor in contact with ground (m)
**bFl     ! 14: width of building floor in contact with ground (m)
**w     ! 15: width of sidewalls of floor (m)
**RGrTot     ! 16: total thermal resistance of floor (Km2/W)
**Psi     ! 17: Linear thermal transmittance associated with wall/floor junction (W/mK)
***** No variables for this Type     
**     
**     
**EQUATIONS 13     
**Tgrd1 = [55,1]     
**Tgrd2 = [55,2]     
**Tgrd5 = [55,3]     
**PBuiGrd = [55,4]     ! positiive values are gains from the ground, negative ones are losses [kJ/h]
**delGrd = [55,5]     
**dt = [55,6]     
**alpha = [55,7]     
**beta = [55,8]     
**Ploss1 = [55,9]     
**Ploss2 = [55,10]     
**Ploss3 = [55,11]     
**PBuiGrd_kW = PBuiGrd/3600     ! gains are positive, losses are negative [kW]
**dTi_out = dTi     
    
EQUATIONS 2   
TRoomLo  = LT(TroomRc,19.5)     ! Room Temperature is too low
**dTShBkp = GT(MfrBuiRd,0.)*(Trdset - TRdFlMix)  ! > 0 lacking T (compared to T_set_d) when T of mixer outlet is to low <0 we have to mix
**PElBkpSh_KW = qAuxStoreSH_KW + TRoomLo*MfrBuiRd*CPWAT*MAX(dTShBkp,0.)/3600. !*OR(HpIsBlockRc,NOT(HpIsOn)) 
**PElBkpSh_KW = qAuxStoreSH_KW !*TRoomLo 
PElBkpSh_KW = 0.
**TRdFl = NOT(GT(PElBkpSh_KW,0))*TRdFlMix+GT(PelBkpSh_KW,0)*Trdset     ! "electric backup heater" (if heat pump has an error, TRdFl is increased to T_set_d to avoid penalties)
**TRdFl = TRdFlMix

UNIT 15 TYPE 816	 !Type816_Transient Value Averaging
PARAMETERS 2
1		! 1 NrV
48		! 2 tav(X)
INPUTS 1
Tamb		! [equation] Va(X)
Tamb 

*** SHADING AS DEFINED IN IDA-ICE ACCORDING TO SIA-NORM AND BUILDING GEOMETRY (BALCONY etc.)
UNIT 32 TYPE 2	! Building Shading Controller: Radiation Nord Side
PARAMETERS 2	
5	! 1 No. of oscillations
5000	! 2 High limit cut-out
INPUTS 6	
IT_N	! Radiation:IT_H ->Upper input value
0,0       	! Lower input value
0,0       	! Monitoring value
shadingControlN     	! Output control function ->Input control function
0,0       	! Upper dead band
0,0       	! Lower dead band
*** INITIAL INPUT VALUES	
15 0 0 0 720.0 540.0	
**        200 W/m² a. 150 W/m² 	

EQUATIONS 1
shadingControlN=[32,1]

UNIT 36 TYPE 2	! Building Shading Controller: Radiation South Side
PARAMETERS 2	
5	! 1 No. of oscillations
5000	! 2 High limit cut-out
INPUTS 6	
IT_S	! Radiation:IT_H ->Upper input value
0,0       	! Lower input value
0,0       	! Monitoring value
shadingControlS     	! Output control function ->Input control function
0,0       	! Upper dead band
0,0       	! Lower dead band
*** INITIAL INPUT VALUES	
15 0 0 0 720.0 540.0	

EQUATIONS 1
shadingControlS=[36,1]

	
UNIT 34 TYPE 2	! Building Shading Controller: Radiation East Side
PARAMETERS 2	
5	! 1 No. of oscillations
5000	! 2 High limit cut-out
INPUTS 6	
IT_E	! Radiation:IT_H ->Upper input value
0,0       	! Lower input value
0,0       	! Monitoring value
shadingControlE     	! Output control function ->Input control function
0,0       	! Upper dead band
0,0       	! Lower dead band
*** INITIAL INPUT VALUES	
15 0 0 0 720.0 540.0	
EQUATIONS 1
shadingControlE=[34,1]
	
	
UNIT 35 TYPE 2	! Building Shading Controller: Radiation West Side
PARAMETERS 2	
5	! 1 No. of oscillations
5000	! 2 High limit cut-out
INPUTS 6	
IT_W	! Radiation:IT_H ->Upper input value
0,0       	! Lower input value
0,0       	! Monitoring value
shadingControlW     	! Output control function ->Input control function
0,0       	! Upper dead band
0,0       	! Lower dead band
*** INITIAL INPUT VALUES	
15 0 0 0 720.0 540.0	

EQUATIONS 1	
shadingControlW=[35,1]
	
UNIT 49 TYPE 2	! Building Shading Controller: Temperature
PARAMETERS 2	
5	! 1 No. of oscillations
95	! 2 High limit cut-out
INPUTS 6	
Troom	! Building:    1- (air temperature of zone)  TAIR   1 ->Upper input value
0,0      	! Lower input value
0,0      	! Monitoring value
shadingConTemp    	! Output control function ->Input control function 49,1
0,0      	! Upper dead band
0,0      	! Lower dead band
*** INITIAL INPUT VALUES	
20.1 0 0 0 21 20 	
EQUATIONS 1	
shadingConTemp=[49,1]
	
	
	
EQUATIONS 6	! Shading Factor (Blinds, other Buildings etc.)
win_g = 0.7321	! g-value windows
win_g_shd = 0.063	! g-value of the window when shaded with blinds
shd_fix_N = 0.89	! Berücksichtigt Fensterleibung, andere Gebäude, Balkone etc. (kann direkt aus Lesosai oder SIA380/1 übernommen werden)
shd_fix_S = 0.43	! Berücksichtigt Fensterleibung, andere Gebäude, Balkone etc. (kann direkt aus Lesosai oder SIA380/1 übernommen werden)
shd_fix_E = 0.86	! Berücksichtigt Fensterleibung, andere Gebäude, Balkone etc. (kann direkt aus Lesosai oder SIA380/1 übernommen werden)
shd_fix_W = 0.82	! Berücksichtigt Fensterleibung, andere Gebäude, Balkone etc. (kann direkt aus Lesosai oder SIA380/1 übernommen werden)
	
EQUATIONS 4	! Variable Shading
**NOT POSSIBLE TO AUTOMATICALLY CHANGE LINES WITH MORE THAN ONE [XX,XX]
**Fsh_N = shd_fix_N * (AND([49,1],[32,1])*win_g_shd+NOT(AND([49,1],[32,1]))*win_g)	
**Fsh_S = shd_fix_S * (AND([49,1],[36,1])*win_g_shd+NOT(AND([49,1],[36,1]))*win_g)	! Wird Fenster g-Value im Model berücksichtigt??? Entsprechend dann XX ausfüllen
**Fsh_E = shd_fix_E * (AND([49,1],[34,1])*win_g_shd+NOT(AND([49,1],[34,1]))*win_g)	
**Fsh_W = shd_fix_W * (AND([49,1],[35,1])*win_g_shd+NOT(AND([49,1],[35,1]))*win_g)	
	
Fsh_N = shd_fix_N * (AND(shadingConTemp,shadingControlN)*win_g_shd+NOT(AND(shadingConTemp,shadingControlN))*win_g)	
Fsh_S = shd_fix_S * (AND(shadingConTemp,shadingControlS)*win_g_shd+NOT(AND(shadingConTemp,shadingControlS))*win_g)	! Wird Fenster g-Value im Model berücksichtigt??? Entsprechend dann XX ausfüllen
Fsh_E = shd_fix_E * (AND(shadingConTemp,shadingControlE)*win_g_shd+NOT(AND(shadingConTemp,shadingControlE))*win_g)	
Fsh_W = shd_fix_W * (AND(shadingConTemp,shadingControlW)*win_g_shd+NOT(AND(shadingConTemp,shadingControlW))*win_g)	
	
EQUATIONS 12	! Ventilation and Infiltration
TairSup = ((Tamb+(Troom-Tamb)*etaHeatRec)*VfrVent+Tamb*(VfrInf+VfrWindow))/VfrAirExTot	! Temperature of the air coming into the building (infiltration and ventilation)
Ua_vent = CPAIR * 1000 * (VfrAirExTot) *RHOAIR	! Thermal transmission coefficient due ventilation and infiltration [W/K]
etaHeatRec = 0.8*LT(Tamb24,18)	! Heatrecovery efficiency of the ventilation system
VfrInf = 0.19307*ScaleVfrVent	! Infiltration  [m3/s]
VfrVent = 0!0.33*ScaleVfrVent	! Ventilation  [m3/s]
VfrAirExTot = VfrInf + VfrVent + VfrWindow	! Air exchange of the building [m3/s]
ScaleVfrWindow = 0.4042
ScaleVfrVent = 0.9943
VfrWindow = AND(GT(MOD(time,8760),2160),LT(MOD(time,8760),6552))*OR(GT(MOD(time,24),20),LT(MOD(time,24),7))*4.2*(ABS((Troom-Tamb))/((Troom+Tamb)/2+273))^(0.5)*ScaleVfrWindow	! Infiltration due window opening [m3/s] (Readout Textfile!)
PGainPer = 1440	! Maximale Wärmeeintrag durch Personen [W]
PGainEquip = 8975.7	! Maximaler Wärmeeintrag durch Geräte [W]
PGainLight = 0!  7649.2*0.75	Maximaler Wärmeeintrag durch Beleuchtung [W]


CONSTANTS 6
********Fitted parameters***********
Cm = 353744712*scaleBuilding ! J/K Internal capacity of the building J/K, 165000*(floor surface), "moyen" / mittlere therm. Kapazität
Am = 4390*scaleBuilding      ! m2 effective mass area, 2.5*(floor surface), "moyen" / mittlere therm. Kapazität
UaWin = 236.7139*scaleBuilding    ! Thermal transmission coefficient of doors, windows, curtains walls and glazed walls W/K
HveISO = Ua_vent ! ventilation heat loss coefficient 300 ; m3/day *day/s * kg/m3 * J/kg K = W/K
Htr_op = 935.7098*scaleBuilding ! W/K, UA value of walls 
UaBui = Htr_op

CONSTANTS 6
*******Scaled values***********
AreaBui = 1169*scaleBuilding ! Conditioned floor area m2
volBui = 2902*scaleBuilding  ! m2
AsolN = 41.01*scaleBuilding  ! effective reception areas of the windows of the north
AsolS = 78.57*scaleBuilding
AsolE = 23.19*scaleBuilding
AsolW = 23.46*scaleBuilding

CONSTANTS 14
rhoAir = 1.002 ! kg/m3
cpAir = 1.2041 ! kJ/kgK
freeMode  = 1 ! 
powerMode = 0 !
heatEmmitter = 0
his = 3.45	   ! Heat transfer coefficient between the air node Tair and the star node W/m2K
hms = 9.1      ! Heat transfer coefficient between the mass-related node Tm and the star node W/m2K
xat = 5.4      ! Ratio between the internal surfaces area and the floor area
Nsurf = 4
Cair = volBui*rhoAir*cpAir*1000 !3128 !J/K
Tinitial = 21
Tint_Hset = 21
Tint_Cset = 26
EpsilonWindow = 0.9

EQUATIONS 5
PGainISO = PbuiIntGain   ! Internal Gains [kJ/h] 
PlossInfr_N = 0!.67*10^-8*((TroomRc+273.15)^4-(Tamb+273.15)^4)*AsolN
PlossInfr_S = 0!5.67*10^-8*((TroomRc+273.15)^4-(Tamb+273.15)^4)*AsolS
PlossInfr_W = 0!5.67*10^-8*((TroomRc+273.15)^4-(Tamb+273.15)^4)*AsolW
PlossInfr_E = 0!5.67*10^-8*((TroomRc+273.15)^4-(Tamb+273.15)^4)*AsolE

** ISO MODEL
UNIT 56 TYPE 5998	 !Type5998
PARAMETERS 13
Cm		! 1 J/K, thermal capacitance of zone (voir ISO 13790-2008 : 12.3)
Am		! 2 m2, surface of the effective thermal mass  (voir ISO 13790-2008 : 12.2.2)
AreaBui	! 3 m2, surface of the heated floor area (voir ISO 13790-2008 : 6.4)
UaWin	! 4 W/K, window heat transfer coefficient (voir ISO 13790-2008 : ANNEXE A)
his		! 5 W/m2K, Heat transfer coefficient between the inner air and the star-node / wall surface (3.45 W/m².K according to the standard)
hms		! 6 W/m2K, heat transfer coefficient between the thermal capacity and the inner surface / star-node (9.1 W/m².K according to the standard)
xat		! 7 ratio between the surface of the inner walls and the heated floor (4.5 according to the standard)
Nsurf		! 8 Nsurf
heatEmmitter		! 9 Heat emitter type
freeMode		! 10 "True" : Calculation of the building temperatures given Phc_nd as an input [Temperatures in outputs 1 to 4 correspond then to this kind of model)
powerMode		! 11 "AC"   : "True" = Calculation of the required power for heating or cooling the building according to set point temp. Tint_Hset and Tint_Cset (PAR(14) and PAR(15)) [Temperatures in outputs 1 to 4 correspond to this kind of model only if "Free" mode PAR(10) is <False>]
Cair		! 12 C_air
Tinitial
**Tint_Hset
**Tint_Cset
INPUTS 23
Tamb		! EQU_Weather:Tamb ->Text
TairSup		! EQU_Weather:Tamb ->Tsup
PheatBui		! kJ/h, heating power from heating system
PGainISO		! kJ/h, internal heat gains (voir ISO 13790-2008 : 10.2)
HveISO		! W/K, ventilation heat loss coefficient (voir ISO 13790-2008 : ANNEXE A)
Htr_op		! [unconnected] W/K, overall heat transfer coefficient of outside walls and roof (voir ISO 13790-2008 : ANNEXE 
**PlossInfr		! [unconnected] -
0,0      !not used
***SURFACE 1
IT_N		! kJ/hm2, total solar irradiation on surface 
Fsh_N		! non-shading factor for surface 1
AsolN		! m2, effective reception area of surface 1 (voir ISO 13790-2008 : 11.3.3 et 11.3.4)
PlossInfr_N	! kJ/h, long wave losses of surface 1  (voir ISO 13790-2008 : 11.3.5 et 11.4.6)
******
IT_S		! EQ_Radiation:IT_S_ISO ->Isol-2
Fsh_S		! [equation] Fsh_ob-2
AsolS		! [unconnected] Asol-2
PlossInfr_S		! [unconnected] Ploss_GLO-2
IT_E		! EQ_Radiation:IT_E_ISO ->Isol-3
Fsh_E		! [equation] Fsh_ob-3
AsolE		! [unconnected] Asol-3
PlossInfr_E		! [unconnected] Ploss_GLO-3
IT_W		! EQ_Radiation:IT_W_ISO ->Isol-4
Fsh_W		! [equation] Fsh_ob-4
AsolW		! [unconnected] Asol-4
PlossInfr_W		! [unconnected] Ploss_GLO-4
10 10 0 0 1 67.55 0 0 Fsh_N 1.43 20 0 Fsh_S 5.71 80 0 Fsh_E 1.9 27 0 Fsh_W 1.9 27 



*** RESULTS SECTION
EQUATIONS 10
Troom = [56,1]
TMass = [56,2]
PBuiUAstatic_kW = [56,11]/3600
PbuiVent_kW = [56,12]/3600
PAcumBui_kW = [56,13]/3600
**PheatNeed_kW = [56,10]/3600 ! heating needed. 
PBuiSol_kW = [56,5]/3600
PBuiGains_kW = ([56,6]+[56,7]+[56,8]-[56,5]+[56,9])/3600
TroomStar = [56,3]
TroomOp = [56,4]
PbuiIntGain_kW = PbuiIntGain/3600
**PbuiIntGain = PbuiIntGain_kW*3600 ! JS: first calculate kW then convert to [kJ/h]


UNIT 57 TYPE 993 !CHANGED DC     ! Input value recall (element RcB)
PARAMETERS 1     
3     ! 1: number of variables to be remembered
INPUTS 3    
Troom TRoomStar CoolingNeeded
20 20 0
     
EQUATIONS 3    ! outputs of Input Value Recall
TroomRc = [57,1]     ! exponent for penalty calculation    
TRoomStarRc = [57,2]     
CoolingNeededRc = [57,3]

EQUATIONS 7     ! penalty calculation for space haeting / cooling according to Task 26 and Task 32
X = 2     ! exponent for penalty calculation
NightPen = GT(MOD(time,24),23)+LT(MOD(time,24),6)        
DayPen = Not(NightPen)       
** dTsh = MAX(0,19.5-Troom)*DayPen+MAX(0,16-Troom)*NightPen      ! delta-T for room heating not met
dTsh = MAX(0,19.5-Troom)*DayPen+MAX(0,19.5-Troom)*NightPen      ! delta-T for room heating not met JS: Change night penalty to 19.5 because we don't heat less during night
PpenSH_kW = UaBui*(dTsh+(dTsh+1)^X-1)/1000.0     ! penalty function for room-temperature below 19.5°C [kW]
dTsc = MAX(0,(Troom-TcoolStart))     ! delta-T for room cooling not met
PpenSC_kW = UaBui*(dTsc+(dTsc+1)^X-1)/1000.0     ! penalty function for room-temperatures above limits of DIN 1946-2 [kW]

CONSTANTS 1 !The ISO model does not provide these ones
PbuiInf_kW = 0

UNIT 59 TYPE 65     ! Online Plotter Building (element OpB)
PARAMETERS 12     
10     ! 1 Nb. of left-axis variables
10     ! 2 Nb. of right-axis variables
-5     ! 3 Left axis minimum
40     ! 4 Left axis maximum
-10     ! 5 Right axis minimum
50     ! 6 Right axis maximum
nPlotsPerSim     ! 7 Number of plots per simulation
12     ! 8 X-axis gridpoints
0     ! 9 Shut off Online w/o removing
-1     ! 10 Logical unit for output file
0     ! 11 Output file units
0     ! 12 Output file delimiter
INPUTS 20     
Tamb  Troom  TRdFl TrdRt  TroomStar  Fsh_S IT_S VfrWindow  TMass  ImbRad 
BoHS RadFloorLoss_kW NIX  NIX NIX  PIDRadBui MfrBuiRd   PtotBui_kW PRdIn_KW    PheatBuiRad_kW  
*******
Tamb  Troom  TRdFl TrdRt  TroomStar  Fsh_S IT_S VfrWindow  TMass  ImbRad 
BoHS RadFloorLoss_kW NIX  NIX NIX  PIDRadBui MfrBuiRd   PtotBui_kW PRdIn_KW    PheatBuiRad_kW  
****
LABELS  3     
Temperatures     
Power     
Building

** ASSIGN    temp\BUILDING_MO.Prt     123

** UNIT 123 Type 46     ! Printegrator Monthly Values for System
** PARAMETERS 6    
** 123     ! 1: Logical unit number, -
** -1     ! 2: Logical unit for monthly summaries, -
** 1     ! 3: Relative or absolute start time. 0: print at time intervals relative to the simulation start time. 1: print at absolute time intervals. No effect for monthly integrations
** -1     ! 4: Printing & integrating interval, h. -1 for monthly integration
** 1     ! 5: Number of inputs to avoid integration, -
** 1     ! 6: Output number to avoid integration
** INPUTS 20
** Time  PheatBui_kW  PRdIn_kW PBuiGrd_kW PBuiLight_kW PbuiGainPers_KW PBuiGainEq_KW PBuiSol_kW PBuiGains_KW  
** PBuiUAstatic_kW PbuiInf_kW PbuiVent_kW PcoolBui_kW NIX QAcumRadiator PAcumBui_kW PpenSH_kW Troom PtotBui_kW PpenSC_kW
*************
** Time  PheatBui_kW  PRdIn_kW PBuiGrd_kW PBuiLight_kW PbuiGainPers_KW PBuiGainEq_KW PBuiSol_kW PBuiGains_KW  
** PBuiUAstatic_kW PbuiInf_kW PbuiVent_kW PcoolBui_kW NIX QAcumRadiator PAcumBui_kW PpenSH_kW Troom  PtotBui_kW PpenSC_kW

**These two are set into the heat pump, but are not correct since they assume that all heat comes from Tes
**QShFromHp 
**QShFromTes

		

**ASSIGN    temp\Bui_HO.Prt      217     
**UNIT 217 Type 46     ! Printegrator Monthly Values for Heat Pump
**PARAMETERS 6     
**217     ! 1: Logical unit number, -
**-1     ! 2: Logical unit for monthly summaries, -
**1     ! 3: Relative or absolute start time. 0: print at time intervals relative to the simulation start time. 1: print at absolute time intervals. No effect for monthly integrations
**1     ! 4: Printing & integrating interval, h. -1 for monthly integration
**1     ! 5: Number of inputs to avoid integration, -
**1     ! 6: Output number to avoid integration
**INPUTS 10     
**Time  PheatBui_kW  PBuiGains_kW PBuiSol_kW PAcumBui_kW PbuiVent_kW PbuiTrLoss_kW PBuiGrd_kW PbuiGainPers_KW PBuiGainEq_KW       
**Time  PheatBui_kW  PBuiGains_kW PBuiSol_kW PAcumBui_kW PbuiVent_kW PbuiTrLoss_kW PBuiGrd_kW PbuiGainPers_KW PBuiGainEq_KW    

*******************************
**END Building.dck
*******************************
